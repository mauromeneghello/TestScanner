DisplayIntegration_funcionCallTrace = [];
function DisplayIntegration_funcionCallWrapper(functionName, testFunction, functionBody) {
  DisplayIntegration_funcionCallTrace.push({functionName: functionName, testFunction: testFunction});
  return functionBody;
}
function DisplayIntegration_getFuncionCallTrace() {
  return DisplayIntegration_funcionCallTrace;
}
module("DisplayIntegration");
QUnit.config.reorder = false;
test("initMeasure", function() {
  DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test1", jQuery("#qunit-fixture").html("<div id=\"qunit-fixture1\"></div> <div id=\"qunit-fixture2\"></div> <div id=\"qunit-fixture3\"></div> <div id=\"qunit-fixture4\"></div> <div id=\"qunit-fixture5\"></div> <div id=\"qunit-fixture6\"></div> <div id=\"qunit-fixture7\"></div> <div id=\"qunit-fixture8\"></div> <div id=\"qunit-fixture9\"></div> <div id=\"qunit-fixture10\"></div>  <div id=\"qunit-fixture11\"></div>"));
  DisplayIntegration_funcionCallWrapper("setOptions", "DisplayIntegration_Test1", Display.setOptions({"factSelector": "#qunit-fixture1", "charts": {"map": "#qunit-fixture2", "timeline": "#qunit-fixture3", "rightChart": "#qunit-fixture4", "table": "#qunit-fixture5"}, "factCubesIntro": "#qunit-fixture6", "factMeasuresIntro": "#qunit-fixture7", "colors": "#qunit-fixture8", "cloudsSelector": "#qunit-fixture9", "zoomSelector": "#qunit-fixture10", "resetSelector": "#qunit-fixture11"}));
  DisplayIntegration_funcionCallWrapper("initMeasure", "DisplayIntegration_Test1", Display.initMeasure());
  var expectedList = DisplayIntegration_funcionCallWrapper("stringify", "DisplayIntegration_Test1", JSON.stringify({"aCube": {"caption": "Goods Quantity", "measures": {'Raised': 'Loaded', 'unloaded': 'Unloaded'}}}));
  equal(DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test1", $("#qunit-fixture1").html()), expectedList, "intialize measures and fact selector effectively set to list of cubes and measures");
  notEqual(Display.schema, null, "A schema is selected");
  notEqual(Display.cube, null, "A cube is selected");
  notEqual(Display.measure, null, "A measure is selected");
});
test("initMetadata", function() {
  DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test2", jQuery("#qunit-fixture").html("<div id=\"qunit-fixture1\"></div> <div id=\"qunit-fixture2\"></div> <div id=\"qunit-fixture3\"></div> <div id=\"qunit-fixture4\"></div> <div id=\"qunit-fixture5\"></div> <div id=\"qunit-fixture6\"></div> <div id=\"qunit-fixture7\"></div> <div id=\"qunit-fixture8\"></div> <div id=\"qunit-fixture9\"></div> <div id=\"qunit-fixture10\"></div>  <div id=\"qunit-fixture11\"></div>"));
  DisplayIntegration_funcionCallWrapper("setOptions", "DisplayIntegration_Test2", Display.setOptions({"factSelector": "#qunit-fixture1", "charts": {"map": "#qunit-fixture2", "timeline": "#qunit-fixture3", "rightChart": "#qunit-fixture4", "table": "#qunit-fixture5"}, "factCubesIntro": "#qunit-fixture6", "factMeasuresIntro": "#qunit-fixture7", "colors": "#qunit-fixture8", "cloudsSelector": "#qunit-fixture9", "zoomId": "#qunit-fixture10", "resetSelector": "#qunit-fixture11"}));
  DisplayIntegration_funcionCallWrapper("initMetadata", "DisplayIntegration_Test2", Display.initMetadata());
  var sliceGeo = DisplayIntegration_funcionCallWrapper("getSliceFromStack", "DisplayIntegration_Test2", Display.getSliceFromStack("geo"));
  var sliceTime = DisplayIntegration_funcionCallWrapper("getSliceFromStack", "DisplayIntegration_Test2", Display.getSliceFromStack("RoundClassDescr"));
  var testGeoMembers = ["AT", "BE", "BG", "CH", "CY", "CZ", "DE", "DK", "EE", "ES", "FI", "FR", "GR", "HR", "HU", "IE", "IS", "IT", "LI", "LT", "LU", "LV", "MT", "NL", "NO", "PL", "PT", "RO", "SE", "SI", "SK", "TR", "UK", "MK"];
  var testTimeMembers = ["First Round", "Seed Round", "Later Stage", "Second Round", "Corporate", "Individual", "ACQ Financing", "Restart", "Unclassified"];
  equal(sliceGeo.properties, true, "good geo slice properties attribute");
  equal(sliceGeo.level, 0, "good geo slice level attribute");
  deepEqual(DisplayIntegration_funcionCallWrapper("keys", "DisplayIntegration_Test2", Object.keys(sliceGeo.members)), testGeoMembers, "good geo slice members attribute");
  equal(sliceTime.properties, false, "good time slice properties attribute");
  equal(sliceTime.level, 0, "good time slice level attribute");
  deepEqual(DisplayIntegration_funcionCallWrapper("keys", "DisplayIntegration_Test2", Object.keys(sliceTime.members)), testTimeMembers, "good time slice members attribute");
  equal(Display.charts.map.options.nbLevels, 1, "map knows the number of levels in geo dimension");
});
test("getData", function() {
  DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test3", jQuery("#qunit-fixture").html("<div id=\"qunit-fixture1\"></div> <div id=\"qunit-fixture2\"></div> <div id=\"qunit-fixture3\"></div> <div id=\"qunit-fixture4\"></div> <div id=\"qunit-fixture5\"></div> <div id=\"qunit-fixture6\"></div> <div id=\"qunit-fixture7\"></div> <div id=\"qunit-fixture8\"></div> <div id=\"qunit-fixture9\"></div> <div id=\"qunit-fixture10\"></div>  <div id=\"qunit-fixture11\"></div>"));
  DisplayIntegration_funcionCallWrapper("setOptions", "DisplayIntegration_Test3", Display.setOptions({"factSelector": "#qunit-fixture1", "charts": {"map": "#qunit-fixture2", "timeline": "#qunit-fixture3", "rightChart": "#qunit-fixture4", "table": "#qunit-fixture5"}, "factCubesIntro": "#qunit-fixture6", "factMeasuresIntro": "#qunit-fixture7", "colors": "#qunit-fixture8", "cloudsSelector": "#qunit-fixture9", "zoomSelector": "#qunit-fixture10", "resetSelector": "#qunit-fixture11"}));
  var CFdata = DisplayIntegration_funcionCallWrapper("getData", "DisplayIntegration_Test3", Display.getData());
  var testCF = DisplayIntegration_funcionCallWrapper("crossfilter", "DisplayIntegration_Test3", crossfilter([{date: "2011-11-14T16:17:54Z", quantity: 2, total: 190, tip: 100, type: "tab"}]));
  notEqual(CFdata, null, "data are not null");
  propEqual(CFdata, testCF, "dataset is a crossfilter dataset");
});
test("init, displayCharts, drillDown, rollUp", function() {
  DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", DisplayIntegration_funcionCallWrapper("empty", "DisplayIntegration_Test4", jQuery("#qunit-fixture").empty()).html("<div id=\"qunit-fixture1\"></div> <div id=\"colums\"></div> <div id=\"qunit-fixture2\"></div> <div id=\"qunit-fixture3\"></div> <div id=\"qunit-fixture4\"></div> <div id=\"qunit-fixture5\"></div> <div id=\"qunit-fixture6\"></div> <div id=\"qunit-fixture7\"></div> <div id=\"qunit-fixture8\"></div> <div id=\"qunit-fixture9\"></div> <div id=\"qunit-fixture10\"></div>  <div id=\"qunit-fixture11\"></div>"));
  DisplayIntegration_funcionCallWrapper("setOptions", "DisplayIntegration_Test4", Display.setOptions({"factSelector": "#qunit-fixture1", "charts": {"map": "#qunit-fixture2", "timeline": "#qunit-fixture3", "rightChart": "#qunit-fixture4", "table": "#qunit-fixture5"}, "factCubesIntro": "#qunit-fixture6", "factMeasuresIntro": "#qunit-fixture7", "colors": "#qunit-fixture8", "cloudsSelector": "#qunit-fixture9", "zoomSelector": "#qunit-fixture10", "resetSelector": "#qunit-fixture11"}));
  DisplayIntegration_funcionCallWrapper("init", "DisplayIntegration_Test4", Display.init());
  notEqual(DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture2").html()), "", "HTML of chart 1 not empty");
  notEqual(DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture3").html()), "", "HTML of chart 2 not empty");
  notEqual(DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture4").html()), "", "HTML of chart 3 not empty");
  notEqual(DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture5").html()), "", "HTML of chart 4 not empty");
  notEqual(Display.charts.map.element, null, "dc.js element representing chart 1 exists");
  notEqual(Display.charts.timeline.element, "", "dc.js element representing chart 2 exists");
  notEqual(Display.charts.rightChart.element, "", "dc.js element representing chart 3 exists");
  notEqual(Display.charts.table.element, "", "dc.js element representing chart 4 exists");
  var slice0 = DisplayIntegration_funcionCallWrapper("getSliceFromStack", "DisplayIntegration_Test4", Display.getSliceFromStack("geo"));
  var html01 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture2").html());
  var html02 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture3").html());
  var html03 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture4").html());
  var html04 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture5").html());
  DisplayIntegration_funcionCallWrapper("drillDown", "DisplayIntegration_Test4", Display.drillDown("geo", "FR"));
  var slice1 = DisplayIntegration_funcionCallWrapper("getSliceFromStack", "DisplayIntegration_Test4", Display.getSliceFromStack("geo"));
  var html11 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture2").html());
  var html12 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture3").html());
  var html13 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture4").html());
  var html14 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture5").html());
  notDeepEqual(slice0, slice1, "Drill-down added a slice");
  notEqual(html01, html11, "Chart 1 changed");
  notEqual(html02, html12, "Chart 2 changed");
  notEqual(html03, html13, "Chart 3 changed");
  notEqual(html04, html14, "Chart 4 changed");
  var state1 = DisplayIntegration_funcionCallWrapper("getState", "DisplayIntegration_Test4", Display.getState());
  var slice0b = DisplayIntegration_funcionCallWrapper("getSliceFromStack", "DisplayIntegration_Test4", Display.getSliceFromStack("geo"));
  html01 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture2").html());
  html02 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture3").html());
  html03 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture4").html());
  html04 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture5").html());
  DisplayIntegration_funcionCallWrapper("rollUp", "DisplayIntegration_Test4", Display.rollUp("geo"));
  html11 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture2").html());
  html12 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture3").html());
  html13 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture4").html());
  html14 = DisplayIntegration_funcionCallWrapper("html", "DisplayIntegration_Test4", $("#qunit-fixture5").html());
  notDeepEqual(slice0b, slice0, "Roll-up returned to first slice");
  notEqual(html01, html11, "Chart 1 changed");
  notEqual(html02, html12, "Chart 2 changed");
  notEqual(html03, html13, "Chart 3 changed");
  notEqual(html04, html14, "Chart 4 changed");
  var state2 = DisplayIntegration_funcionCallWrapper("getState", "DisplayIntegration_Test4", Display.getState());
  notDeepEqual(state1, state2, "state has changed");
});
